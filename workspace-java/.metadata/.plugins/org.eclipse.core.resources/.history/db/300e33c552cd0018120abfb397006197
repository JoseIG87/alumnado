package com.tecso.app.web;

@RestController
@RequestMapping("/alumno")
public class hCalzadoController extends BaseRestController{
	
	private static final Logger LOGGER = LoggerFactory.getLogger(hCalzadoController.class);
	
	@Autowired
	private CalzadoService servicio;
	
	public hCalzadoController(CalzadoService servicio) {
		super();
		this.servicio = servicio;
	}
	
	@RequestMapping(value = "/zapatillas/all", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_UTF8_VALUE) 
	public ResponseEntity<ListaProductoDTO> getAllZapatillasPaginado(@RequestParam("pagina") int page, @RequestParam("cantidad") int amount) throws ServiceException{
		ResponseEntity<ListaProductoDTO> respuesta = new ResponseEntity<ListaProductoDTO>(HttpStatus.NOT_FOUND);
		ListaProductoDTO rta = new ListaProductoDTO();
		
		List<ProductoDTO> zapas = new ArrayList<ProductoDTO>();
		zapas = servicio.getAllCalzadosHombre("zapatilla", page, amount);	
		Integer cantidadZapas = servicio.obtenerCantidadDeProductosPorTipo("zapatilla");
		List<ProductoDTO> listaTotal = servicio.getAllCalzadosHombre("zapatilla", 1, cantidadZapas);
		
		rta.setCantidadPaginas(cantidadZapas);
		rta.setListaProductos(zapas);
		rta.setMinPrice(listaTotal.isEmpty() ? new BigDecimal(0) : listaTotal.get(0).getPrecioProducto());
		rta.setMaxPrice(listaTotal.isEmpty() ? new BigDecimal(0) : listaTotal.get(listaTotal.size()-1).getPrecioProducto());	
		rta.setListaMarcas(servicio.getAllMarcasZapatillas());
		
		if(!zapas.isEmpty()) {
			respuesta = new ResponseEntity<ListaProductoDTO>(rta, HttpStatus.OK);	
		}	
		return respuesta;
	}
	
	@RequestMapping(value = "/zapatillas/all", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
	public ResponseEntity<ListaProductoDTO> getBetweenPrice(@RequestParam("precioMin") BigDecimal precioMin, @RequestParam("precioMax") BigDecimal precioMax, 
			@RequestParam("pagina") int page, @RequestParam("cantidad") int amount, @RequestBody List<MarcasDTO> marcas) throws ServiceException {
		ResponseEntity<ListaProductoDTO> respuesta = new ResponseEntity<ListaProductoDTO>(HttpStatus.NOT_FOUND);
		ListaProductoDTO rta = new ListaProductoDTO();
		
		List<ProductoDTO> zapas = new ArrayList<ProductoDTO>();
		zapas = servicio.getAllCalzadoHombreWithFilter("zapatilla", page, amount, precioMin, precioMax, marcas);
		Integer cantidadZapas = servicio.obtenerCantidadDeProductosPorTipoConFiltros("zapatilla", precioMin, precioMax, marcas);
		
		rta.setCantidadPaginas(cantidadZapas);
		rta.setListaProductos(zapas);
		rta.setMinPrice(precioMin);
		rta.setMaxPrice(precioMax);	
		
		if(!zapas.isEmpty()) {
			respuesta = new ResponseEntity<ListaProductoDTO>(rta, HttpStatus.OK);	
		}	
		return respuesta;
	}

}

